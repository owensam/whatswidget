!function(n){var t={};function e(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=n,e.c=t,e.d=function(n,t,r){e.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:r})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,t){if(1&t&&(n=e(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var o in n)e.d(r,o,function(t){return n[t]}.bind(null,o));return r},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=5)}([function(n,t){n.exports='<div class="whtsc"> <div class="whtsm"></div> <a target="_blank" rel="nofollow" class="whatswidget-button"><img src="https://cdn.jsdelivr.net/gh/mascarell/whatswidget/assets/whatsapp.svg" alt="Whatsapp Icon"/></a> </div> '},function(n,t,e){"use strict";n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e=function(n,t){var e=n[1]||"",r=n[3];if(!r)return e;if(t&&"function"==typeof btoa){var o=(i=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),A="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(A," */")),a=r.sources.map((function(n){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([o]).join("\n")}var i,s,A;return[e].join("\n")}(t,n);return t[2]?"@media ".concat(t[2]," {").concat(e,"}"):e})).join("")},t.i=function(n,e,r){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var s=0;s<n.length;s++){var A=[].concat(n[s]);r&&o[A[0]]||(e&&(A[2]?A[2]="".concat(e," and ").concat(A[2]):A[2]=e),t.push(A))}},t}},function(n,t,e){var r=e(3),o=e(4);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[n.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);n.exports=o.locals||{}},function(n,t,e){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var n={};return function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}n[t]=e}return n[t]}}(),i=[];function s(n){for(var t=-1,e=0;e<i.length;e++)if(i[e].identifier===n){t=e;break}return t}function A(n,t){for(var e={},r=[],o=0;o<n.length;o++){var a=n[o],A=t.base?a[0]+t.base:a[0],c=e[A]||0,l="".concat(A," ").concat(c);e[A]=c+1;var d=s(l),p={css:a[1],media:a[2],sourceMap:a[3]};-1!==d?(i[d].references++,i[d].updater(p)):i.push({identifier:l,updater:m(p,t),references:1}),r.push(l)}return r}function c(n){var t=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var o=e.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(n){t.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(t);else{var i=a(n.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var l,d=(l=[],function(n,t){return l[n]=t,l.filter(Boolean).join("\n")});function p(n,t,e,r){var o=e?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=d(t,o);else{var a=document.createTextNode(o),i=n.childNodes;i[t]&&n.removeChild(i[t]),i.length?n.insertBefore(a,i[t]):n.appendChild(a)}}function u(n,t,e){var r=e.css,o=e.media,a=e.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),a&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var h=null,f=0;function m(n,t){var e,r,o;if(t.singleton){var a=f++;e=h||(h=c(t)),r=p.bind(null,e,a,!1),o=p.bind(null,e,a,!0)}else e=c(t),r=u.bind(null,e,t),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)};return r(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;r(n=t)}else o()}}n.exports=function(n,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var e=A(n=n||[],t);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<e.length;r++){var o=s(e[r]);i[o].references--}for(var a=A(n,t),c=0;c<e.length;c++){var l=s(e[c]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}e=a}}}},function(n,t,e){"use strict";e.r(t);var r=e(1),o=e.n(r)()(!0);o.push([n.i,"@import url(https://fonts.googleapis.com/css?family=Darker+Grotesque&display=swap);"]),o.push([n.i,".whtsc{\r\n    position: fixed;\r\n    z-index: 10002;\r\n    bottom: 0; right: 0; left: auto; top: auto;\r\n    content: '';\r\n    font-family: Verdana, Geneva, sans-serif;\r\n    padding: 12px;\r\n}\r\n.whtsc .whtsm{\r\n    position: relative;\r\n    font-size: 18px; background-color: #f7f7f7;\r\n    letter-spacing: 1px;\r\n    font-family: 'Darker Grotesque', sans-serif;\r\n    box-shadow: 1px 2px 8px rgba(70,70,70,.25);\r\n    padding: 10px 20px; padding-right: 30px;\r\n    border-radius: 8px;\r\n    color: #525252;\r\n    font-weight: 600;\r\n    margin-bottom: 12px;\r\n    max-width: 450px;\r\n    width: auto;\r\n\tdisplay: none;\r\n\tanimation-duration: .5s;\r\n\tanimation-fill-mode: both;\r\n\t/* animation-name: slide; */\r\n\tanimation-delay: 1s;\r\n}\r\n.whtsc .whtsm span{ content: ''; position: absolute; width: 15px; height: 15px; right: 15px; top: 15px; left: auto; }\r\n.whtsc .whtsm span:hover{ cursor: pointer; }\r\n.whtsc .whtsm span::after{ content: ''; position: absolute; top: 8px; left: 0; width: 10px; height: 2px; background-color: #979797; transform: rotate(45deg); }\r\n.whtsc .whtsm span::before{ content: ''; position: absolute; top: 8px; left: 0; width: 10px; height: 2px; background-color: #979797; transform: rotate(-45deg); }\r\n.whtsc .whatswidget-button{\r\n    content: '';\r\n    width: 48px; height: 48px;\r\n    position: relative;\r\n    float: right;\r\n    display: flex; justify-content: center; align-items: center;\r\n    transition: .1s linear;\r\n\tanimation-duration: .5s;\r\n\tanimation-fill-mode: both;\r\n\t/* animation-name: zoomIn; */\r\n}\r\n.whtsc .whatswidget-button::before{ \r\n    content: ''; position: absolute;\r\n    border-radius: 50%;\r\n    z-index: 10000;\r\n    width: 100%; height: 100%;\r\n    box-shadow: 1px 2px 8px rgba(70,70,70,.25);\r\n}\r\n.whtsc .whatswidget-button img{ \r\n    z-index: 10001;\r\n    transition: .1s linear;\r\n    margin: 0 !important; padding: 0 !important;\r\n    max-width: 100%; \r\n}\r\n.whtsc .whatswidget-button:hover img{\r\n    cursor: pointer;\r\n    transform: scale(1.1);\r\n}\r\n\r\n/* POSITION THE WIDGET TO THE LEFT */\r\n.whtsc.left{ left: 0; width: auto; right: initial; }\r\n.whtsc.left .whatswidget-button{ float: left; }\r\n\r\n/* SHOW WIDGET ON MOBILES DIVICES */\r\n.whtsc.show-message-always .whtsm{ display: block; }\r\n\r\n/* Tablets */\r\n@media only screen and (min-width : 768px) \r\n{\r\n    .whtsc .whtsm span{ right: 10px;}\r\n    .whtsc .whtsm{ display: block; }\r\n}\r\n\r\n@keyframes zoomIn {\r\n    from {\r\n        transform: scale(.2);\r\n        opacity: 0;\r\n    }\r\n}\r\n@keyframes slide {\r\n    from {\r\n        transform: translateY(20px);\r\n        opacity: 0;\r\n    }\r\n}\r\n\r\n/* Classes for animations */\r\n.zoomIn { animation-name: zoomIn; }\r\n.slide { animation-name: slide; }","",{version:3,sources:["webpack://src/views/message.css"],names:[],mappings:"AAEA;IACI,eAAe;IACf,cAAc;IACd,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS;IAC1C,WAAW;IACX,wCAAwC;IACxC,aAAa;AACjB;AACA;IACI,kBAAkB;IAClB,eAAe,EAAE,yBAAyB;IAC1C,mBAAmB;IACnB,2CAA2C;IAC3C,0CAA0C;IAC1C,kBAAkB,EAAE,mBAAmB;IACvC,kBAAkB;IAClB,cAAc;IACd,gBAAgB;IAChB,mBAAmB;IACnB,gBAAgB;IAChB,WAAW;CACd,aAAa;CACb,uBAAuB;CACvB,yBAAyB;CACzB,2BAA2B;CAC3B,mBAAmB;AACpB;AACA,oBAAoB,WAAW,EAAE,kBAAkB,EAAE,WAAW,EAAE,YAAY,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE;AACpH,0BAA0B,eAAe,EAAE;AAC3C,2BAA2B,WAAW,EAAE,kBAAkB,EAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,yBAAyB,EAAE,wBAAwB,EAAE;AAC9J,4BAA4B,WAAW,EAAE,kBAAkB,EAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,yBAAyB,EAAE,yBAAyB,EAAE;AAChK;IACI,WAAW;IACX,WAAW,EAAE,YAAY;IACzB,kBAAkB;IAClB,YAAY;IACZ,aAAa,EAAE,uBAAuB,EAAE,mBAAmB;IAC3D,sBAAsB;CACzB,uBAAuB;CACvB,yBAAyB;CACzB,4BAA4B;AAC7B;AACA;IACI,WAAW,EAAE,kBAAkB;IAC/B,kBAAkB;IAClB,cAAc;IACd,WAAW,EAAE,YAAY;IACzB,0CAA0C;AAC9C;AACA;IACI,cAAc;IACd,sBAAsB;IACtB,oBAAoB,EAAE,qBAAqB;IAC3C,eAAe;AACnB;AACA;IACI,eAAe;IACf,qBAAqB;AACzB;;AAEA,oCAAoC;AACpC,aAAa,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE;AACnD,iCAAiC,WAAW,EAAE;;AAE9C,mCAAmC;AACnC,mCAAmC,cAAc,EAAE;;AAEnD,YAAY;AACZ;;IAEI,oBAAoB,WAAW,CAAC;IAChC,eAAe,cAAc,EAAE;AACnC;;AAEA;IACI;QACI,oBAAoB;QACpB,UAAU;IACd;AACJ;AACA;IACI;QACI,2BAA2B;QAC3B,UAAU;IACd;AACJ;;AAEA,2BAA2B;AAC3B,UAAU,sBAAsB,EAAE;AAClC,SAAS,qBAAqB,EAAE",sourcesContent:["@import url('https://fonts.googleapis.com/css?family=Darker+Grotesque&display=swap');\r\n\r\n.whtsc{\r\n    position: fixed;\r\n    z-index: 10002;\r\n    bottom: 0; right: 0; left: auto; top: auto;\r\n    content: '';\r\n    font-family: Verdana, Geneva, sans-serif;\r\n    padding: 12px;\r\n}\r\n.whtsc .whtsm{\r\n    position: relative;\r\n    font-size: 18px; background-color: #f7f7f7;\r\n    letter-spacing: 1px;\r\n    font-family: 'Darker Grotesque', sans-serif;\r\n    box-shadow: 1px 2px 8px rgba(70,70,70,.25);\r\n    padding: 10px 20px; padding-right: 30px;\r\n    border-radius: 8px;\r\n    color: #525252;\r\n    font-weight: 600;\r\n    margin-bottom: 12px;\r\n    max-width: 450px;\r\n    width: auto;\r\n\tdisplay: none;\r\n\tanimation-duration: .5s;\r\n\tanimation-fill-mode: both;\r\n\t/* animation-name: slide; */\r\n\tanimation-delay: 1s;\r\n}\r\n.whtsc .whtsm span{ content: ''; position: absolute; width: 15px; height: 15px; right: 15px; top: 15px; left: auto; }\r\n.whtsc .whtsm span:hover{ cursor: pointer; }\r\n.whtsc .whtsm span::after{ content: ''; position: absolute; top: 8px; left: 0; width: 10px; height: 2px; background-color: #979797; transform: rotate(45deg); }\r\n.whtsc .whtsm span::before{ content: ''; position: absolute; top: 8px; left: 0; width: 10px; height: 2px; background-color: #979797; transform: rotate(-45deg); }\r\n.whtsc .whatswidget-button{\r\n    content: '';\r\n    width: 48px; height: 48px;\r\n    position: relative;\r\n    float: right;\r\n    display: flex; justify-content: center; align-items: center;\r\n    transition: .1s linear;\r\n\tanimation-duration: .5s;\r\n\tanimation-fill-mode: both;\r\n\t/* animation-name: zoomIn; */\r\n}\r\n.whtsc .whatswidget-button::before{ \r\n    content: ''; position: absolute;\r\n    border-radius: 50%;\r\n    z-index: 10000;\r\n    width: 100%; height: 100%;\r\n    box-shadow: 1px 2px 8px rgba(70,70,70,.25);\r\n}\r\n.whtsc .whatswidget-button img{ \r\n    z-index: 10001;\r\n    transition: .1s linear;\r\n    margin: 0 !important; padding: 0 !important;\r\n    max-width: 100%; \r\n}\r\n.whtsc .whatswidget-button:hover img{\r\n    cursor: pointer;\r\n    transform: scale(1.1);\r\n}\r\n\r\n/* POSITION THE WIDGET TO THE LEFT */\r\n.whtsc.left{ left: 0; width: auto; right: initial; }\r\n.whtsc.left .whatswidget-button{ float: left; }\r\n\r\n/* SHOW WIDGET ON MOBILES DIVICES */\r\n.whtsc.show-message-always .whtsm{ display: block; }\r\n\r\n/* Tablets */\r\n@media only screen and (min-width : 768px) \r\n{\r\n    .whtsc .whtsm span{ right: 10px;}\r\n    .whtsc .whtsm{ display: block; }\r\n}\r\n\r\n@keyframes zoomIn {\r\n    from {\r\n        transform: scale(.2);\r\n        opacity: 0;\r\n    }\r\n}\r\n@keyframes slide {\r\n    from {\r\n        transform: translateY(20px);\r\n        opacity: 0;\r\n    }\r\n}\r\n\r\n/* Classes for animations */\r\n.zoomIn { animation-name: zoomIn; }\r\n.slide { animation-name: slide; }"],sourceRoot:""}]),t.default=o},function(n,t,e){"use strict";e.r(t);var r=e(0),o=e.n(r),a=(e(2),document.createElement("div"));a.innerHTML=o.a;var i=a.querySelector(".whtsc");function s(n){if(n.useAnimations&&(i.querySelector(".whtsm").classList.add("slide"),i.querySelector(".whatswidget-button").classList.add("zoomIn")),n.message?n.useCookies&&null==document.cookie.match(/^(.*;)?\s*showmessage\s*=\s*[^;]+(.*)?$/)?(i.querySelector(".whtsm").innerHTML="".concat(n.message," <span></span>"),i.querySelector(".whtsm span").addEventListener("click",A),function(n,t,e){var r,o;console.log("creating cookie"),e?((r=new Date).setTime(r.getTime()+24*e*60*60*1e3),o="; expires="+r.toGMTString()):o="";document.cookie=n+"="+t+o+"; path=/"}("showmessage","no",1)):n.useCookies?i.querySelector(".whtsm").remove():(i.querySelector(".whtsm").innerHTML="".concat(n.message," <span></span>"),i.querySelector(".whtsm span").addEventListener("click",A)):i.querySelector(".whtsm").remove(),n.phone)try{var t=n.phone[Math.floor(Math.random()*n.phone.length)];i.querySelector(".whatswidget-button").href="https://api.whatsapp.com/send?phone=".concat(t)}catch(n){console.error("whatswidget -> cannot select phone number")}n.floatLeft&&i.classList.add("left"),n.showMessageAlways&&i.classList.add("show-message-always"),document.getElementsByTagName("body")[0].appendChild(i)}function A(){i.querySelector(".whtsm").style.display="none"}var c=["config"];function l(n,t){if(!n)throw Error("API method required");if(n=n.toLowerCase(),-1===c.indexOf(n))throw Error("Method ".concat(n," is not supported"));switch(n){case"config":s(t);break;default:console.warn("No handler defined for ".concat(n))}}!function(n){var t=n[n.ww],e=t.q;if(e)for(var r=0;r<e.length;r++)l(e[r][0],e[r][1]);(t=l).configurations={message:!1,phone:!1,floatLeft:!1,showMessageAlways:!1,useCookies:!1,useAnimations:!1}}(window)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,